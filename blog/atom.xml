<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://spencerheath.info/blog</id>
    <title>Spencer Heath Blog</title>
    <updated>2025-03-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://spencerheath.info/blog"/>
    <subtitle>Spencer Heath Blog</subtitle>
    <icon>https://spencerheath.info/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Streamlining Dell Updates with NinjaOne: A PowerShell Solution]]></title>
        <id>https://spencerheath.info/blog/dcu-automation-ninjaone</id>
        <link href="https://spencerheath.info/blog/dcu-automation-ninjaone"/>
        <updated>2025-03-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Automating Dell System Updates]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="automating-dell-system-updates">Automating Dell System Updates<a href="https://spencerheath.info/blog/dcu-automation-ninjaone#automating-dell-system-updates" class="hash-link" aria-label="Direct link to Automating Dell System Updates" title="Direct link to Automating Dell System Updates">​</a></h2>
<p>Managing updates for Dell systems can be a time-consuming task, especially across multiple devices. To address this, I’ve developed a PowerShell script that integrates Dell Command Update (DCU) with NinjaOne, automating the process from installation to execution. This post walks through what it does, how it works, and how you can deploy it in your environment.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="purpose-and-features">Purpose and Features<a href="https://spencerheath.info/blog/dcu-automation-ninjaone#purpose-and-features" class="hash-link" aria-label="Direct link to Purpose and Features" title="Direct link to Purpose and Features">​</a></h3>
<p>Dell Command Update is a powerful tool for keeping Dell systems current with the latest BIOS, firmware, drivers, and applications. My script takes it a step further by automating key operations within NinjaOne, an RMM platform I use extensively. Here’s what it offers:</p>
<ul>
<li><strong>System Validation</strong>: Confirms the device is a Dell system and removes conflicting "Dell Update" applications that could interfere with DCU.</li>
<li><strong>Dynamic Installation</strong>: Downloads and installs the latest DCU version directly from Dell’s support site, ensuring you’re always up to date.</li>
<li><strong>Customizable Scans</strong>: Supports general scans for all updates or targeted BIOS/firmware scans, with results logged to NinjaOne custom fields (except for general scans, which output to CLI).</li>
<li><strong>Flexible Updates</strong>: Options to install all updates, exclude BIOS/firmware, or focus solely on BIOS/firmware, all triggered via a single NinjaOne variable.</li>
<li><strong>NinjaOne Integration</strong>: Updates custom fields (<code>DCU1</code> for status, <code>DCU2</code> for details) to streamline monitoring and reporting.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configuration">Configuration<a href="https://spencerheath.info/blog/dcu-automation-ninjaone#configuration" class="hash-link" aria-label="Direct link to Configuration" title="Direct link to Configuration">​</a></h3>
<p>The script is controlled through a NinjaOne dropdown variable named <code>pleaseSelectAnOptionToRun</code>. You’ll need to set this up with the following options:</p>
<ul>
<li><strong>Install</strong>: Installs DCU after removing incompatible apps.</li>
<li><strong>Remove Incompatible Versions</strong>: Cleans up conflicting Dell Update software.</li>
<li><strong>Run Scan</strong>: Performs a full update scan, outputting results to the CLI.</li>
<li><strong>Run BIOS and Firmware Scan</strong>: Scans for BIOS/firmware updates, logging to NinjaOne fields.</li>
<li><strong>Run Scan And Install All</strong>: Scans and applies all available updates.</li>
<li><strong>Run Scan And Install Excluding BIOS and Firmware</strong>: Applies updates, skipping BIOS/firmware.</li>
<li><strong>Run Scan And Install BIOS and Firmware ONLY</strong>: Targets only BIOS/firmware updates.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="technical-overview">Technical Overview<a href="https://spencerheath.info/blog/dcu-automation-ninjaone#technical-overview" class="hash-link" aria-label="Direct link to Technical Overview" title="Direct link to Technical Overview">​</a></h3>
<p>Here’s a breakdown of the script’s core functionality:</p>
<ul>
<li><strong>Pre-Installation Checks</strong>: Scans the registry (<code>HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall</code>) to uninstall incompatible Dell Update apps silently, ensuring a clean slate for DCU.</li>
<li><strong>DCU Download</strong>: Uses <code>Invoke-RestMethod</code> to scrape Dell’s support page for the latest DCU <code>.exe</code>, then downloads it with <code>Invoke-WebRequest</code>—no manual URL hunting required.</li>
<li><strong>Execution Logic</strong>: Leverages <code>dcu-cli.exe</code> with tailored arguments (e.g., <code>-silent</code>, <code>-updateType</code>) to scan or apply updates. Exit codes are mapped to descriptive statuses in NinjaOne fields:<!-- -->
<ul>
<li><code>0</code>: Updates available.</li>
<li><code>500</code>: No updates found.</li>
<li><code>1, 5</code>: Reboot required.</li>
<li>Full mapping in the script’s <code>Handle-DCUExitCode</code> function.</li>
</ul>
</li>
<li><strong>Error Handling</strong>: Wraps operations in try-catch blocks, logging failures to NinjaOne for easy troubleshooting.</li>
</ul>
<p>The full script is available on my GitHub: <a href="https://github.com/Sp-e-n-c-er/Public-Ninja-One-Scripts/blob/main/Dell%20Command%20Update/Dell%20Command%20Update%20Automation%20Toolkit.ps1" target="_blank" rel="noopener noreferrer">Public-Ninja-One-Scripts</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="benefits">Benefits<a href="https://spencerheath.info/blog/dcu-automation-ninjaone#benefits" class="hash-link" aria-label="Direct link to Benefits" title="Direct link to Benefits">​</a></h3>
<ul>
<li><strong>Efficiency</strong>: Automates repetitive update tasks across Dell fleets.</li>
<li><strong>Visibility</strong>: Integrates with NinjaOne’s custom fields for real-time status tracking.</li>
<li><strong>Control</strong>: Offers granular options to suit different update strategies.</li>
<li><strong>Open Source</strong>: Released under the MIT License—free to use, modify, and distribute.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-steps">Deployment Steps<a href="https://spencerheath.info/blog/dcu-automation-ninjaone#deployment-steps" class="hash-link" aria-label="Direct link to Deployment Steps" title="Direct link to Deployment Steps">​</a></h3>
<ol>
<li><strong>Download</strong>: Grab the script from <a href="https://github.com/Sp-e-n-c-er/Public-Ninja-One-Scripts/blob/main/Dell%20Command%20Update/Dell%20Command%20Update%20Automation%20Toolkit.ps1" target="_blank" rel="noopener noreferrer">GitHub</a>.</li>
<li><strong>Configure NinjaOne</strong>: Add the <code>pleaseSelectAnOptionToRun</code> dropdown with the listed options.</li>
<li><strong>Run</strong>: Deploy it via NinjaOne’s script engine and monitor results in your custom fields.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="notes-and-disclaimer">Notes and Disclaimer<a href="https://spencerheath.info/blog/dcu-automation-ninjaone#notes-and-disclaimer" class="hash-link" aria-label="Direct link to Notes and Disclaimer" title="Direct link to Notes and Disclaimer">​</a></h3>
<p>This script is provided under the MIT License—use it freely, but at your own risk. I’m not liable for any issues that arise; see the full license at <a href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener noreferrer">opensource.org/licenses/MIT</a> for details. It’s been tested in my environment, but always validate in yours before going full throttle.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="feedback-welcome">Feedback Welcome<a href="https://spencerheath.info/blog/dcu-automation-ninjaone#feedback-welcome" class="hash-link" aria-label="Direct link to Feedback Welcome" title="Direct link to Feedback Welcome">​</a></h3>
<p>Have thoughts or suggestions? Reach out on <a href="https://github.com/Sp-e-n-c-er" target="_blank" rel="noopener noreferrer">GitHub</a> or <a href="https://discordapp.com/users/286552274099240960" target="_blank" rel="noopener noreferrer">Discord</a>. I’m considering enhancements like automatic version checks or expanded error reporting—let me know what you’d like to see!</p>
<p>Thanks for reading—happy automating!</p>
<p><em>Spencer Heath, 10 March 2025</em></p>]]></content>
        <author>
            <name>Spencer Heath</name>
            <uri>https://github.com/Sp-e-n-c-er</uri>
        </author>
        <category label="PowerShell" term="PowerShell"/>
        <category label="NinjaOne" term="NinjaOne"/>
        <category label="Dell" term="Dell"/>
        <category label="Automation" term="Automation"/>
        <category label="System Management" term="System Management"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Locking NinjaOne Systray scripts from users]]></title>
        <id>https://spencerheath.info/blog/AdminLock-Script</id>
        <link href="https://spencerheath.info/blog/AdminLock-Script"/>
        <updated>2025-03-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This guide explains how to create scripts for the NinjaOne system tray and configure some to run exclusively for administrators, using a checkbox within NinjaOne to control access. This approach enhances security and oversight for script execution. However, this method is best suited for restricting scripts that you’d prefer end users not interact with, rather than for critical security measures. It’s ideal for minor administrative tasks where accidental access wouldn’t pose a significant security risk, not for safeguarding highly sensitive operations.]]></summary>
        <content type="html"><![CDATA[<p>This guide explains how to create scripts for the NinjaOne system tray and configure some to run exclusively for administrators, using a checkbox within NinjaOne to control access. This approach enhances security and oversight for script execution. However, this method is best suited for restricting scripts that you’d prefer end users not interact with, rather than for critical security measures. It’s ideal for minor administrative tasks where accidental access wouldn’t pose a significant security risk, not for safeguarding highly sensitive operations.</p>
<p><strong>Disclaimer</strong>: I am not responsible for any actions you take based on this guide or the outcomes that result from implementing these configurations. Use at your own discretion and ensure they align with your organization’s security policies.</p>
<p><strong>Resources and Credits</strong>:</p>
<ul>
<li>All icons and fonts referenced in this guide can be found at <a href="https://fonts.google.com/icons?icon.size=24&amp;icon.color=%23e3e3e3" target="_blank" rel="noopener noreferrer">Google Fonts - Symbols &amp; Icons</a>.</li>
<li>Special thanks to the <a href="https://www.youtube.com/watch?v=qBhk0awc3-c" target="_blank" rel="noopener noreferrer">NinjaOne Stream</a> for inspiration and insights.</li>
<li>Shoutout to JT (MrDrProfessorJT) and Trevor (StrikerTS) for sharing that resource, and to Joseph for the inspiration!</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-1-access-global-custom-fields">Step 1: Access Global Custom Fields<a href="https://spencerheath.info/blog/AdminLock-Script#step-1-access-global-custom-fields" class="hash-link" aria-label="Direct link to Step 1: Access Global Custom Fields" title="Direct link to Step 1: Access Global Custom Fields">​</a></h2>
<p>Navigate to <strong>Settings &gt; Administration &gt; Global Custom Fields</strong> in the NinjaOne interface to begin setting up the necessary configurations.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-define-a-new-global-custom-field">Step 2: Define a New Global Custom Field<a href="https://spencerheath.info/blog/AdminLock-Script#step-2-define-a-new-global-custom-field" class="hash-link" aria-label="Direct link to Step 2: Define a New Global Custom Field" title="Direct link to Step 2: Define a New Global Custom Field">​</a></h2>
<p>Set up a global custom field with the following details to track admin status:</p>
<table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td>Custom Field Type</td><td>Check box</td></tr><tr><td>Label</td><td>AdminStatus</td></tr><tr><td>Definition Scope</td><td>Device</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configure-permissions">Configure Permissions<a href="https://spencerheath.info/blog/AdminLock-Script#configure-permissions" class="hash-link" aria-label="Direct link to Configure Permissions" title="Direct link to Configure Permissions">​</a></h3>
<p>Assign the appropriate permissions to control access to this field:</p>
<table><thead><tr><th>Role</th><th>Permission</th></tr></thead><tbody><tr><td>Technician</td><td>Editable</td></tr><tr><td>Automation</td><td>Read/Write</td></tr><tr><td>API</td><td>None</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="restricting-system-tray-scripts">Restricting System Tray Scripts<a href="https://spencerheath.info/blog/AdminLock-Script#restricting-system-tray-scripts" class="hash-link" aria-label="Direct link to Restricting System Tray Scripts" title="Direct link to Restricting System Tray Scripts">​</a></h2>
<p>Incorporate the following PowerShell code into any system tray script you want to limit to admin users only:</p>
<div class="language-powershell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-powershell codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">$AdminStatusFieldName = "AdminStatus"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">$MessageTitle = "Access Denied"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">$MessageBody = "This script requires administrative privileges. Contact your admin for assistance."</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">$AdminStatus = Ninja-Property-Get $AdminStatusFieldName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">if ($AdminStatus -ne 1) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    $Session = Get-CimInstance -ClassName Win32_ComputerSystem | Select-Object -ExpandProperty UserName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    if ($Session) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        $Username = $Session.Split('\')[1]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Invoke-Expression "msg $($Username) /TIME:30 '$MessageTitle - $MessageBody'"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Write-Output "Message sent to $($Username): Admin access required."</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    } else {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Write-Output "No active user session detected to notify."</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">} else {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ## Insert Script to run here!</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Write-Output "Admin access granted. Running admin script."</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="safeguarding-the-admin-restriction">Safeguarding the Admin Restriction<a href="https://spencerheath.info/blog/AdminLock-Script#safeguarding-the-admin-restriction" class="hash-link" aria-label="Direct link to Safeguarding the Admin Restriction" title="Direct link to Safeguarding the Admin Restriction">​</a></h2>
<p>To prevent the <code>AdminStatus</code> field from being left enabled accidentally, set up an automated process to enforce its restricted state.
Depending on your preferences, configure this as an automation policy or a scheduled task.
Execute the following script hourly to automatically disable the field if it’s been overlooked:</p>
<div class="language-powershell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-powershell codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">$AdminStatusFieldName = "AdminStatus"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">$AdminStatus = Ninja-Property-Get $AdminStatusFieldName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">if ($AdminStatus -ne 0) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Ninja-Property-Set $AdminStatusFieldName 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Write-Output "AdminStatus has been successfully disabled."</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">else {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Write-Output "AdminStatus is already in a disabled state."</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-the-system-tray-for-admin-only-scripts">Configuring the System Tray for Admin-Only Scripts<a href="https://spencerheath.info/blog/AdminLock-Script#configuring-the-system-tray-for-admin-only-scripts" class="hash-link" aria-label="Direct link to Configuring the System Tray for Admin-Only Scripts" title="Direct link to Configuring the System Tray for Admin-Only Scripts">​</a></h2>
<p>Next, let’s configure the NinjaOne system tray to clearly distinguish and organize scripts reserved for admin use. This setup ensures they’re both easily recognizable and securely managed.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="steps">Steps:<a href="https://spencerheath.info/blog/AdminLock-Script#steps" class="hash-link" aria-label="Direct link to Steps:" title="Direct link to Steps:">​</a></h3>
<ol>
<li>Go to <strong>Administration &gt; Branding &gt; Systray</strong> in the NinjaOne interface.</li>
<li>Either create a new system tray configuration or edit an existing one.</li>
<li>Add the following elements to structure your admin-only scripts:</li>
</ol>
<table><thead><tr><th>Menu Item Type</th><th>Details</th></tr></thead><tbody><tr><td>Separator</td><td>(Creates a visual break)</td></tr><tr><td>Group</td><td>Label: "Admin Only Scripts"</td></tr><tr><td>Automation</td><td>Your admin-specific scripts</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="explanation">Explanation:<a href="https://spencerheath.info/blog/AdminLock-Script#explanation" class="hash-link" aria-label="Direct link to Explanation:" title="Direct link to Explanation:">​</a></h3>
<ul>
<li><strong>Separator</strong>: Inserts a dividing line in the tray menu to enhance visual separation.</li>
<li><strong>Group</strong>: Establishes a labeled section titled "Admin Only Scripts" to categorize restricted scripts.</li>
<li><strong>Automation</strong>: Nest your admin-only automations (e.g., scripts with the <code>AdminStatus</code> check) under the "Admin Only Scripts" group. This nesting ensures these scripts appear as submenu items beneath the group label, keeping them organized and clearly tied to their admin-only purpose.</li>
</ul>
<p>This configuration not only isolates admin scripts visually in the system tray but also reinforces their restricted access through the <code>AdminStatus</code> check, providing a seamless experience for technicians.</p>
<p>See below for a visual guide on the systray setup, and the message a user will see if they dont have the permissions to run this.</p>
<img src="https://github.com/user-attachments/assets/6fa5af98-e91d-49a6-b1e8-24e474745bb1" alt="Admin Only Scripts System Tray Example" width="300">
<img src="https://github.com/user-attachments/assets/3e9481d7-bfbc-4106-90d4-dc4b03d5a6c7" alt="Invalid rights message" width="300">]]></content>
        <author>
            <name>Spencer Heath</name>
            <uri>https://github.com/Sp-e-n-c-er</uri>
        </author>
        <category label="PowerShell" term="PowerShell"/>
        <category label="NinjaOne" term="NinjaOne"/>
        <category label="Automation" term="Automation"/>
    </entry>
</feed>